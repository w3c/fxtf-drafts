<h1>Geometry Interfaces Module Level 1</h1>
<!-- To the extent possible under law, the editors have waived all copyright and related or neighboring rights to this work. -->
<pre class='metadata'>
Shortname: geometry
Level: 1
Status: ED
ED: https://drafts.fxtf.org/geometry/
TR: https://www.w3.org/TR/geometry-1/
Previous Version: https://www.w3.org/TR/2014/CR-geometry-1-20141125/
Previous Version: https://www.w3.org/TR/2014/WD-geometry-1-20140918/
Previous Version: https://www.w3.org/TR/2014/WD-geometry-1-20140626/
Previous Version: https://www.w3.org/TR/2014/WD-geometry-1-20140522/
Previous Version: https://www.w3.org/TR/2013/WD-matrix-20130919/
Group: fxtf
Ignored Terms: float32array, float64array, indexsizeerror, DOMString, boolean
Link Defaults: css-transforms-1 (type) <transform-list>/<transform-function>, css-transforms-1 (function) matrix3d()/matrix()
Editor: Simon Pieters, Opera Software ASA, simonp@opera.com
Editor: Dirk Schulze, Adobe Systems Inc., dschulze@adobe.com
Editor: Rik Cabanier, Adobe Systems Inc., cabanier@adobe.com
Abstract: This specification provides basic geometric interfaces to represent points, rectangles, quadrilaterals and transformation matrices that can be used by other modules or specifications.
!Issues list: <a href="https://www.w3.org/Bugs/Public/buglist.cgi?product=FXTF&amp;component=Geometry&amp;resolution=---">Bugzilla</a> (<a href="https://www.w3.org/Bugs/Public/enter_bug.cgi?product=FXTF&amp;component=Geometry">file a bug</a>)
Test Suite: http://test.csswg.org/suites/geometry-1_dev/nightly-unstable/
Use <i> Autolinks: yes
Ignored Vars: a, b, f, Point object, m44, e, m42, quad1, m41, stringifier, point object, m12, c, transformPoint, m21, d, m22, quad2, sz
</pre>

<pre class=anchors>
type: exception; text: SyntaxError; url: https://html.spec.whatwg.org/multipage/infrastructure.html#js-syntaxerror
</pre>

<script src=https://resources.whatwg.org/file-bug.js async></script>
<script src="../shared/MathJax/MathJax.js?config=MML_SVGorMML,local/local"></script>

<style type="text/css">
a[data-link-type=element]::before,span[data-link-type=element]::before {
  content: '<';
}
a[data-link-type=element]::after,span[data-link-type=element]::after {
  content: '>';
}
</style>

<h2 id='intro'>Introduction</h2>

This specification describes several geometry interfaces [[!WEBIDL]] for the representation of points, rectangles, quadrilaterals and transformation matrices with the dimension of 3x2 and 4x4.

The SVG interfaces SVGPoint, SVGRect and SVGMatrix [[SVG11]] are aliasing the here defined interfaces in favor for common interfaces used by SVG, Canvas 2D Context [[2DCONTEXT]] and CSS Transforms [[!CSS3-TRANSFORMS]].

Issue: The IDL in this specification is currently in an experimental state.
An <a href="https://lists.w3.org/Archives/Public/public-fx/2015AprJun/0001.html">approach</a> of avoiding overloading in constructors and instead using factory static methods, and supporting dictionary types everywhere, is explored.
Readers interested in a specification that more closely matches implementations as of April 2015 are referred to an <a href="https://www.w3.org/TR/2014/WD-geometry-1-20140522/">earlier revision of this specification</a>.

<h2 id='DOMPoint'>
The DOMPoint interfaces</h2>

A 2D or a 3D <dfn>point</dfn> can be represented by the following WebIDL interfaces:

<pre class='idl'>
[Constructor(optional unrestricted double x = 0, optional unrestricted double y = 0,
             optional unrestricted double z = 0, optional unrestricted double w = 1),
 Exposed=(Window,Worker)]
interface DOMPointReadOnly {
    [NewObject] static DOMPointReadOnly fromPoint(optional DOMPointInit other);

    readonly attribute unrestricted double x;
    readonly attribute unrestricted double y;
    readonly attribute unrestricted double z;
    readonly attribute unrestricted double w;

    DOMPoint matrixTransform(optional DOMMatrixInit matrix);

    serializer = { attribute };
};

[Constructor(optional unrestricted double x = 0, optional unrestricted double y = 0,
             optional unrestricted double z = 0, optional unrestricted double w = 1),
 Exposed=(Window,Worker)]
interface DOMPoint : DOMPointReadOnly {
    [NewObject] static DOMPoint fromPoint(optional DOMPointInit other);

    inherit attribute unrestricted double x;
    inherit attribute unrestricted double y;
    inherit attribute unrestricted double z;
    inherit attribute unrestricted double w;
};

dictionary DOMPointInit {
    unrestricted double x = 0;
    unrestricted double y = 0;
    unrestricted double z = 0;
    unrestricted double w = 1;
};
</pre>

The following algorithms assume that <a interface>DOMPointReadOnly</a> objects have the internal member variables <dfn dfn-for=point id=point-x-coordinate>x coordinate</dfn>, <dfn dfn-for=point id=point-y-coordinate>y coordinate</dfn>, <dfn dfn-for=point id=point-z-coordinate>z coordinate</dfn> and <dfn dfn-for=point id=point-w-perspective>w perspective</dfn>. <a interface>DOMPointReadOnly</a> as well as the inheriting interface <a interface>DOMPoint</a> must be able to access and set the value of these variables.

An interface returning an <a interface>DOMPointReadOnly</a> object by an attribute or function may be able to modify internal member variable values. Such an interface must specify this ability explicitly in prose.

Internal member variables must not be exposed in any way.

The <dfn dfn-type=constructor dfn-for=DOMPointReadOnly><code>DOMPointReadOnly(<var>x</var>, <var>y</var>, <var>z</var>, <var>w</var>)</code></dfn> and
<dfn dfn-type=constructor dfn-for=DOMPoint><code>DOMPoint(<var>x</var>, <var>y</var>, <var>z</var>, <var>w</var>)</code></dfn> constructors, when invoked, must run the following steps:

<ol class=algorithm>
  <li>Let <var>point</var> be a new {{DOMPointReadOnly}} or {{DOMPoint}} object as appropriate.
  <li>Set <var>point</var>'s variables <a for=point>x coordinate</a> to <var>x</var>, <a for=point>y coordinate</a> to <var>y</var>, <a>z coordinate</a> to <var>z</var> and <a>w perspective</a> to <var>w</var>.</li>
  <li>Return <var>point</var>.</li>
</ol>

The <dfn method dfn-for=DOMPointReadOnly
id=dom-dompointreadonly-frompoint><code>fromPoint(<var>other</var>)</code></dfn> static method on
{{DOMPointReadOnly}} must <a>create a <code>DOMPointReadOnly</code> from the dictionary</a>
<var>other</var>.

The <dfn method dfn-for=DOMPoint
id=dom-dompoint-frompoint><code>fromPoint(<var>other</var>)</code></dfn> static method on
{{DOMPoint}} <a>create a <code>DOMPoint</code> from the dictionary</a> <var>other</var>.

To <dfn lt="create a DOMPointReadOnly from the dictionary">create a <code>DOMPointReadOnly</code>
from a dictionary</dfn> <var>other</var>, or to <dfn lt="create a DOMPoint from the
dictionary">create a <code>DOMPoint</code> from a dictionary</dfn> <var>other</var>, follow these
steps:

<ol class=algorithm>
  <li>Let <var>point</var> be a new {{DOMPointReadOnly}} or {{DOMPoint}} as appropriate.
  <li>Set <var>point</var>'s variables <a for=point>x coordinate</a> to <var>other</var>'s {{DOMPointInit/x}} dictionary member, <a for=point>y coordinate</a> to <var>other</var>'s {{DOMPointInit/y}} dictionary member, <a>z coordinate</a> to <var>other</var>'s {{DOMPointInit/z}} dictionary member and <a>w perspective</a> to <var>other</var>'s {{DOMPointInit/w}} dictionary member.</li>
  <li>Return <var>point</var>.</li>
</ol>

<div dfn-type=attribute dfn-for='DOMPointReadOnly, DOMPoint'>
  The <dfn>x</dfn> attribute, on getting, must return the <a for=point>x coordinate</a> value of the object it was invoked on. For the <a interface>DOMPoint</a> interface, setting the <a attribute for=DOMPoint>x</a> attribute must set the <a for=point>x coordinate</a> value of the object it was invoked on to the new value.

  The <dfn>y</dfn> attribute, on getting, must return the <a for=point>y coordinate</a> value of the object it was invoked on. For the <a interface>DOMPoint</a> interface, setting the <a attribute for=DOMPoint>y</a> attribute must set the <a for=point>y coordinate</a> value of the object it was invoked on to the new value.

  The <dfn>z</dfn> attribute, on getting, must return the <a>z coordinate</a> value of the object it was invoked on. For the <a interface>DOMPoint</a> interface, setting the <a attribute for=DOMPoint>z</a> attribute must set the <a>z coordinate</a> value of the object it was invoked on to the new value.

  The <dfn>w</dfn> attribute, on getting, must return the <a>w perspective</a> value of the object it was invoked on. For the <a interface>DOMPoint</a> interface, setting the <a attribute for=DOMPoint>w</a> attribute must set the <a>w perspective</a> value of the object it was invoked on to the new value.
</div>

<dfn dfn-type=method dfn-for=DOMPointReadOnly>matrixTransform(<var>matrix</var>)</dfn>, when invoked, must run the following steps</dt>

<ol>
  <li>Create a new <a interface>DOMPoint</a> <var>point</var> initialized to <a attribute for=DOMPoint>x</a>, <a attribute for=DOMPoint>y</a>, <a attribute for=DOMPoint>z</a> and <a attribute for=DOMPoint>w</a> of the current point.</li>
  <li>Let <var>matrix object</var> be the result of invoking <a>create a <code>DOMMatrix</code> from the dictionary</a> <var>matrix</var>.
  <li><i>Post-multiply</i> <var>point</var> with <var>matrix object</var>.</li>
  <li>Return <var>point</var>.</li>
</ol>
<p><a>matrixTransform()</a> does not modify the current <a interface>DOMPointReadOnly</a> object and returns a new <a interface>DOMPoint</a> object.
<div class='example'>
  <p>In this example the method {{DOMPointReadOnly/matrixTransform()}} on <var>point</var> is called with a <a interface>DOMMatrix</a> argument <var>matrix</var>.</p>
  <pre><code>var point = new DOMPoint(5, 4);
var matrix = new DOMMatrix([2, 0, 0, 2, 10, 10]);
var transformedPoint = point.matrixTransform(matrix);
  </code></pre>
  <p><var>point</var> creates a new <a interface>DOMPoint</a> object initialized to the same attribute values as <var>point</var>. This new <a interface>DOMPoint</a> is now scaled and the translated by <var>matrix</var>. This resulting <var>transformPoint</var> has the attribute values <code>x: 20</code> and <code>y: 18</code>.</p>
</div>

For historical reasons, {{Window}} objects must also have a writable, configurable, non-enumerable
property named <code>SVGPoint</code> whose value is the <a interface>DOMPoint</a> interface object.

<h2 id='DOMRect'>
The DOMRect interfaces</h2>

Objects implementing the <a interface>DOMRectReadOnly</a> interface represent a <dfn>rectangle</dfn>. The type of box is specified by the method or attribute that returns a <a interface>DOMRect</a> or <a interface>DOMRectReadOnly</a> object.

Rectangles have the following properties:

<dl dfn-for=rectangle>
  <dt><dfn for=rectangle id=rectangle-origin>origin</dfn></dt>
  <dd>
    When the rectangle has a non-negative <a for=rectangle>width dimension</a>, the rectangle's horizontal origin is the left edge; otherwise, it is the right edge. Similarly, when the rectangle has a non-negative <a for=rectangle>height dimension</a>, the rectangle's vertical origin is the top edge; otherwise, it is the bottom edge.
  </dd>
  <dt><dfn for=rectangle id=rectangle-x-coordinate>x coordinate</dfn></dt>
  <dd>
    The horizontal distance between the viewport's left edge and the rectangle's <a for=rectangle>origin</a>.
  </dd>
  <dt><dfn for=rectangle id=rectangle-y-coordinate>y coordinate</dfn></dt>
  <dd>
    The vertical distance between the viewport's top edge and the rectangle's <a for=rectangle>origin</a>.
  </dd>
  <dt><dfn for=rectangle id=rectangle-width-dimension>width dimension</dfn></dt>
  <dd>
    The width of the rectangle. Can be negative.
  </dd>
  <dt><dfn for=rectangle id=rectangle-height-dimension>height dimension</dfn></dt>
  <dd>
    The height of the rectangle. Can be negative.
  </dd>
</dl>

<pre class='idl'>
[Constructor(optional unrestricted double x = 0, optional unrestricted double y = 0,
             optional unrestricted double width = 0, optional unrestricted double height = 0),
 Exposed=(Window,Worker)]
interface DOMRectReadOnly {
    [NewObject] static DOMRectReadOnly fromRect(optional DOMRectInit other);

    readonly attribute unrestricted double x;
    readonly attribute unrestricted double y;
    readonly attribute unrestricted double width;
    readonly attribute unrestricted double height;
    readonly attribute unrestricted double top;
    readonly attribute unrestricted double right;
    readonly attribute unrestricted double bottom;
    readonly attribute unrestricted double left;

    serializer = { attribute };
};

[Constructor(optional unrestricted double x = 0, optional unrestricted double y = 0,
             optional unrestricted double width = 0, optional unrestricted double height = 0),
 Exposed=(Window,Worker)]
interface DOMRect : DOMRectReadOnly {
    [NewObject] static DOMRect fromRect(optional DOMRectInit other);

    inherit attribute unrestricted double x;
    inherit attribute unrestricted double y;
    inherit attribute unrestricted double width;
    inherit attribute unrestricted double height;
};

dictionary DOMRectInit {
    unrestricted double x = 0;
    unrestricted double y = 0;
    unrestricted double width = 0;
    unrestricted double height = 0;
};
</pre>

The following algorithms assume that <a interface>DOMRectReadOnly</a> objects have the internal member variables <a for=rectangle>x coordinate</a>, <a for=rectangle>y coordinate</a>, <a for=rectangle>width dimension</a> and <a for=rectangle>height dimension</a>. <a interface>DOMRectReadOnly</a> as well as the inheriting interface <a interface>DOMRect</a> must be able to access and set the value of these variables.

An interface returning an <a interface>DOMRectReadOnly</a> object by an attribute or function may be able to modify internal member variable values. Such an interface must specify this ability explicitly in prose.

Internal member variables must not be exposed in any way.

The <dfn dfn-type=constructor dfn-for=DOMRectReadOnly><code>DOMRectReadOnly(<var>x</var>, <var>y</var>, <var>width</var>, <var>height</var>)</code></dfn> and
<dfn dfn-type=constructor dfn-for=DOMRect><code>DOMRect(<var>x</var>, <var>y</var>, <var>width</var>, <var>height</var>)</code></dfn> constructors, when invoked, must run the following steps:

<ol class=algorithm>
  <li>Let <var>rect</var> be a new {{DOMRectReadOnly}} or {{DOMRect}} object as appropriate.
  <li>Set <var>rect</var>'s variables <a for=rectangle>x coordinate</a> to <var>x</var>, <a for=rectangle>y coordinate</a> to <var>y</var>, <a for=rectangle>width dimension</a> to <var>width</var> and <a for=rectangle>height dimension</a> to <var>height</var>.</li>
  <li>Return <var>rect</var>.</li>
</ol>

The <dfn method lt=fromRect() dfn-for=DOMRectReadOnly
id=dom-domrectreadonly-fromrect><code>fromRect(<var>other</var>)</code></dfn> static method on
{{DOMRectReadOnly}} must <a>create a <code>DOMRectReadOnly</code> from the dictionary</a>
<var>other</var>.

The <dfn method lt=fromRect() dfn-for=DOMRect
id=dom-domrect-fromrect><code>fromRect(<var>other</var>)</code></dfn> static method on {{DOMRect}}
must <a>create a <code>DOMRect</code> from the dictionary</a> <var>other</var>.

To <dfn lt="create a DOMRectReadOnly from the dictionary">create a <code>DOMRectReadOnly</code>
from a dictionary</dfn> <var>other</var>, or to <dfn lt="create a DOMRect from the
dictionary">create a <code>DOMRect</code> from a dictionary</dfn> <var>other</var>, follow these
steps:

<ol class=algorithm>
  <li>Let <var>rect</var> be a new {{DOMRectReadOnly}} or {{DOMRect}} as appropriate.</li>
  <li>Set <var>rect</var>'s variables <a for=rectangle>x coordinate</a> to <var>other</var>'s {{DOMRectInit/x}} dictionary member, <a for=rectangle>y coordinate</a> to <var>other</var>'s {{DOMRectInit/y}} dictionary member, <a for=rectangle>width dimension</a> to <var>other</var>'s {{DOMRectInit/width}} dictionary member and <a for=rectangle>height dimension</a> to <var>other</var>'s {{DOMRectInit/height}} dictionary member.</li>
  <li>Return <var>rect</var>.</li>
</ol>

<div dfn-type=attribute dfn-for='DOMRectReadOnly DOMRect'>
  The <dfn>x</dfn> attribute, on getting, must return the <a for=rectangle>x coordinate</a> value of the object it was invoked on. For the <a interface>DOMRect</a> interface, setting the <a attribute for=DOMRect>x</a> attribute must set the <a for=rectangle>x coordinate</a> value of the object it was invoked on to the new value.

  The <dfn>y</dfn> attribute, on getting, it must return the <a for=rectangle>y coordinate</a> value of the object it was invoked on. For the <a interface>DOMRect</a> interface, setting the <a attribute for=DOMRect>y</a> attribute must set the <a for=rectangle>y coordinate</a> value of the object it was invoked on to the new value.

  The <dfn>width</dfn> attribute, on getting, must return the <a for=rectangle>width dimension</a> value of the object it was invoked on. For the <a interface>DOMRect</a> interface, setting the <a attribute for=DOMRect>width</a> attribute must set the <a for=rectangle>width dimension</a> value of the object it was invoked on to the new value.

  The <dfn>height</dfn> attribute, on getting, must return the <a for=rectangle>height dimension</a> value. For the <a interface>DOMRect</a> interface, setting the <a attribute for=DOMRect>height</a> attribute must set the <a for=rectangle>height dimension</a> value to the new value.

  The <dfn>top</dfn> attribute, on getting, must return min(<a for=rectangle>y coordinate</a>, <a for=rectangle>y coordinate</a> + <a for=rectangle>height dimension</a>) of the object it was invoked on.

  The <dfn>right</dfn> attribute, on getting, must return max(<a for=rectangle>x coordinate</a>, <a for=rectangle>x coordinate</a> + <a for=rectangle>width dimension</a>) of the object it was invoked on.

  The <dfn>bottom</dfn> attribute, on getting, must return max(<a for=rectangle>y coordinate</a>, <a for=rectangle>y coordinate</a> + <a for=rectangle>height dimension</a>) of the object it was invoked on.

  The <dfn>left</dfn> attribute, on getting, must return min(<a for=rectangle>x coordinate</a>, <a for=rectangle>x coordinate</a> + <a for=rectangle>width dimension</a>) of the object it was invoked on.
</div>

For historical reasons, {{Window}} objects must also have a writable, configurable, non-enumerable
property named <dfn dfn-type=interface>SVGRect</dfn> whose value is the <a interface>DOMRect</a>
interface object.

<h2 id='DOMQuad'>
The DOMQuad interface</h2>

Objects implementing the <a interface>DOMQuad</a> interface represents a <dfn>quadrilateral</dfn>.

<pre class='idl'>
[Constructor(optional DOMPointInit p1, optional DOMPointInit p2,
             optional DOMPointInit p3, optional DOMPointInit p4),
 Exposed=(Window,Worker)]
interface DOMQuad {
    [NewObject] static DOMQuad fromRect(optional DOMRectInit other);
    [NewObject] static DOMQuad fromQuad(optional DOMQuadInit other);

    [SameObject] readonly attribute DOMPoint p1;
    [SameObject] readonly attribute DOMPoint p2;
    [SameObject] readonly attribute DOMPoint p3;
    [SameObject] readonly attribute DOMPoint p4;
    [NewObject] DOMRect getBounds();

    serializer = { attribute };
};

dictionary DOMQuadInit {
  DOMPointInit p1;
  DOMPointInit p2;
  DOMPointInit p3;
  DOMPointInit p4;
};
</pre>

The <dfn dfn-type=constructor dfn-for=DOMQuad><code>DOMQuad(<var>p1</var>, <var>p2</var>, <var>p3</var>, <var>p4</var>)</code></dfn> constructor, when invoked, must run the following steps:

<ol class='algorithm'>
  <li>Let <var>point 1</var> be a new <a interface>DOMPoint</a> object with its attributes set to the values of the namesake dictionary members in <var>p1</var>.
  <li>Let <var>point 2</var> be a new <a interface>DOMPoint</a> object with its attributes set to the values of the namesake dictionary members in <var>p2</var>.
  <li>Let <var>point 3</var> be a new <a interface>DOMPoint</a> object with its attributes set to the values of the namesake dictionary members in <var>p3</var>.
  <li>Let <var>point 4</var> be a new <a interface>DOMPoint</a> object with its attributes set to the values of the namesake dictionary members in <var>p4</var>.
  <li><p>Return a new <a interface>DOMQuad</a> with <a attribute for=DOMQuad>p1</a> set to <var>point 1</var>, <a attribute for=DOMQuad>p2</a> set to <var>point 2</var>, <a attribute for=DOMQuad>p3</a> set to <var>point 3</var> and <a attribute for=DOMQuad>p4</a> set to <var>point 4</var>.
</ol>

Note: It is possible to pass <a interface>DOMPoint</a>/<a interface>DOMPointReadOnly</a> arguments as well. The passed arguments will be transformed to the correct object type internally following the WebIDL rules [[!WEBIDL]].

The <dfn method lt=fromRect() dfn-for=DOMQuad><code>fromRect(<var>other</var>)</code></dfn> static
method on {{DOMQuad}} must <a>create a <code>DOMQuad</code> from the <code>DOMRectInit</code>
dictionary</a> <var>other</var>.

To <dfn lt="create a DOMQuad from the DOMRectInit dictionary">create a <code>DOMQuad</code> from a
<code>DOMRectInit</code> dictionary</dfn> <var>other</var>, follow these steps:

<ol class='algorithm'>
  <li>Let <var>x</var>, <var>y</var>, <var>width</var> and <var>height</var> be the value of <var>other</var>'s <a attribute for=DOMRectReadOnly>x</a>, <a attribute for=DOMRectReadOnly>y</a>, <a attribute for=DOMRectReadOnly>width</a> and <a attribute for=DOMRectReadOnly>height</a> attributes, respectively.
  <li>Let <var>point 1</var> be a new <a interface>DOMPoint</a> object with <a attribute for=DOMPoint>x</a> set to <var>x</var>, <a attribute for=DOMPoint>y</a> set to <var>y</var>, <a attribute for=DOMPoint>z</a> set to zero and <a attribute for=DOMPoint>w</a> set to one.
  <li>Let <var>point 2</var> be a new <a interface>DOMPoint</a> object with <a attribute for=DOMPoint>x</a> set to <var>x</var> + <var>width</var>, <a attribute for=DOMPoint>y</a> set to <var>y</var>, <a attribute for=DOMPoint>z</a> set to zero and <a attribute for=DOMPoint>w</a> set to one.
  <li>Let <var>point 3</var> be a new <a interface>DOMPoint</a> object with <a attribute for=DOMPoint>x</a> set to <var>x</var> + <var>width</var>, <a attribute for=DOMPoint>y</a> set to <var>y</var> + <var>height</var>, <a attribute for=DOMPoint>z</a> set to zero and <a attribute for=DOMPoint>w</a> set to one.
  <li>Let <var>point 4</var> be a new <a interface>DOMPoint</a> object with <a attribute for=DOMPoint>x</a> set to <var>x</var>, <a attribute for=DOMPoint>y</a> set to <var>y</var> + <var>height</var>, <a attribute for=DOMPoint>z</a> set to zero and <a attribute for=DOMPoint>w</a> set to one.
  <li><p>Return a new <a interface>DOMQuad</a> with <a attribute for=DOMQuad>p1</a> set to <var>point 1</var>, <a attribute for=DOMQuad>p2</a> set to <var>point 2</var>, <a attribute for=DOMQuad>p3</a> set to <var>point 3</var> and <a attribute for=DOMQuad>p4</a> set to <var>point 4</var>.
</ol>

The <dfn method lt=fromQuad() dfn-for=DOMQuad><code>fromQuad(<var>other</var>)</code></dfn> static
method on {{DOMQuad}} must <a>create a <code>DOMQuad</code> from the <code>DOMQuadInit</code>
dictionary</a> <var>other</var>.

To <dfn lt="create a DOMQuad from the DOMQuadInit dictionary">create a <code>DOMQuad</code> from a
<code>DOMQuadInit</code> dictionary</dfn> <var>other</var>, follow these steps:

1. Let <var>point 1</var> be the result of invoking <a>create a <code>DOMPoint</code> from the dictionary</a> {{DOMQuadInit/p1}} dictionary member of <var>other</var>, if it exists.
1. Let <var>point 2</var> be the result of invoking <a>create a <code>DOMPoint</code> from the dictionary</a> {{DOMQuadInit/p2}} dictionary member of <var>other</var>, if it exists.
1. Let <var>point 3</var> be the result of invoking <a>create a <code>DOMPoint</code> from the dictionary</a> {{DOMQuadInit/p3}} dictionary member of <var>other</var>, if it exists.
1. Let <var>point 4</var> be the result of invoking <a>create a <code>DOMPoint</code> from the dictionary</a> {{DOMQuadInit/p4}} dictionary member of <var>other</var>, if it exists.
1. Return a new {{DOMQuad}} with
    {{DOMQuad/p1}} set to <var>point 1</var>,
    {{DOMQuad/p2}} set to <var>point 2</var>,
    {{DOMQuad/p3}} set to <var>point 3</var> and
    {{DOMQuad/p4}} set to <var>point 4</var>.

<div dfn-type=attribute dfn-for=DOMQuad>
 The <dfn>p1</dfn> attribute must return a <a interface>DOMPoint</a> that represents <a attribute>p1</a> of the quadrilateral it was invoked on. The author can modify the returned <a interface>DOMPoint</a> object, which directly affects the quadrilateral.

 The <dfn>p2</dfn> attribute must return a <a interface>DOMPoint</a> that represents <a attribute>p2</a> of the quadrilateral it was invoked on. The author can modify the returned <a interface>DOMPoint</a> object, which directly affects the quadrilateral.

 The <dfn>p3</dfn> attribute must return a <a interface>DOMPoint</a> that represents <a attribute>p3</a> of the quadrilateral it was invoked on. The author can modify the returned <a interface>DOMPoint</a> object, which directly affects the quadrilateral.

 The <dfn>p4</dfn> attribute must return a <a interface>DOMPoint</a> that represents <a attribute>p4</a> of the quadrilateral it was invoked on. The author can modify the returned <a interface>DOMPoint</a> object, which directly affects the quadrilateral.
</div>

The <dfn method for=DOMQuad>getBounds()</dfn> method, when invoked, must run the following algorithm:

<ol class='algorithm'>
  <li>Let <var>bounds</var> be a <a interface>DOMRect</a> object.</li>
  <li>Let <var>left</var> be the minimum of <a attribute>p1</a>.x, <a attribute>p2</a>.x, <a attribute>p3</a>.x and <a attribute>p4</a>.x.</li>
  <li>Let <var>top</var> be the minimum of <a attribute>p1</a>.y, <a attribute>p2</a>.y, <a attribute>p3</a>.y and <a attribute>p4</a>.y.</li>
  <li>Let <var>right</var> be the maximum of <a attribute>p1</a>.x, <a attribute>p2</a>.x, <a attribute>p3</a>.x and <a attribute>p4</a>.x.</li>
  <li>Let <var>bottom</var> be the maximum of <a attribute>p1</a>.y, <a attribute>p2</a>.y, <a attribute>p3</a>.y and <a attribute>p4</a>.y.</li>
  <li>Let <a for=rectangle>x coordinate</a> of <var>bounds</var> be <var>left</var>, <a for=rectangle>y coordinate</a> of <var>bounds</var> be <var>top</var>, <a for=rectangle>width dimension</a> of <var>bounds</var> be <var>right</var> - <var>left</var> and <a for=rectangle>height dimension</a> of <var>bounds</var> be <var>bottom</var> - <var>top</var>.</li>
  <li>Return <var>bounds</var>.
</ol>

<div class='example'>
<p>In this example the <a interface>DOMQuad</a> constructor is called with arguments of type <a interface>DOMPoint</a> and <a dictionary>DOMPointInit</a>. Both arguments are accepted and can be used.
<pre><code>var point = new DOMPoint(2, 0);
var quad1 = new DOMQuad(point, {x: 12, y: 0}, {x: 2, y: 10}, {x: 12, y: 10});</code></pre>
<p>The attribute values of the resulting <a interface>DOMQuad</a> <var>quad1</var> above are also equal to the attribute values of the following <a interface>DOMQuad</a> <var>quad2</var>:</p>
<pre><code>var rect = new DOMRect(2, 0, 10, 10);
var quad2 = DOMQuad.fromRect(rect);</code></pre>
</div>
<div class='example'>
<p>This is an example of an irregular quadrilateral:</p>
<pre><code>new DOMQuad({x: 40, y: 25}, {x: 180, y: 8}, {x: 210, y: 150}, {x: 10, y: 180});
</code></pre>
<div class="figure">
  <svg width="230" height="200">
    <title>An irregular quadrilateral with none of the sides being vertical or horizontal. Its four corners are marked with red circles. Around this quadrilateral is a dashed rectangle. All sides of this rectangle are vertical or horizontal and tangent the quadrilateral.</title>
    <polygon points="40 25, 180 8, 210 150, 10 180" fill="rgb(51, 153, 204)"/>
    <rect x="10" y="8" width="200" height="172" fill="none" stroke="black" stroke-dasharray="3 2"/>
    <circle cx="40" cy="25" r="3" fill="rgb(204, 51, 51)"/>
    <circle cx="180" cy="8" r="3" fill="rgb(204, 51, 51)"/>
    <circle cx="210" cy="150" r="3" fill="rgb(204, 51, 51)"/>
    <circle cx="10" cy="180" r="3" fill="rgb(204, 51, 51)"/>
  </svg>
  <p class="capture">An irregular quadrilateral represented by a <a interface>DOMQuad</a>. The four red colored circles represent the <a interface>DOMPoint</a> attributes <a attribute>p1</a> to <a attribute>p4</a>. The dashed rectangle represents the bounding rectangle returned by the {{DOMQuad/getBounds()}} method of the <a interface>DOMQuad</a>.</p>
</div>
</div>

<h2 id='DOMMatrix'>
The DOMMatrix interfaces</h2>

The <a interface>DOMMatrix</a> and <a interface>DOMMatrixReadOnly</a> interfaces each represent a mathematical <dfn>matrix</dfn> with the purpose of describing transformations in a graphical context. The following sections describe the details of the interface.

<div class="figure">
  <!--<img src="images/4x4matrix.png" alt="4x4 matrix with items m11 to m44">-->
  <math display=block><mrow><mfenced open=[ close=] separators=,><mrow><mtable><mtr><mtd><msub><mi>m</mi><mi>11</mi></msub></mtd><mtd><msub><mi>m</mi><mi>21</mi></msub></mtd><mtd><msub><mi>m</mi><mi>31</mi></msub></mtd><mtd><msub><mi>m</mi><mi>41</mi></msub></mtd></mtr><mtr><mtd><msub><mi>m</mi><mi>12</mi></msub></mtd><mtd><msub><mi>m</mi><mi>22</mi></msub></mtd><mtd><msub><mi>m</mi><mi>32</mi></msub></mtd><mtd><msub><mi>m</mi><mi>42</mi></msub></mtd></mtr><mtr><mtd><msub><mi>m</mi><mi>13</mi></msub></mtd><mtd><msub><mi>m</mi><mi>23</mi></msub></mtd><mtd><msub><mi>m</mi><mi>33</mi></msub></mtd><mtd><msub><mi>m</mi><mi>43</mi></msub></mtd></mtr><mtr><mtd><msub><mi>m</mi><mi>14</mi></msub></mtd><mtd><msub><mi>m</mi><mi>24</mi></msub></mtd><mtd><msub><mi>m</mi><mi>34</mi></msub></mtd><mtd><msub><mi>m</mi><mi>44</mi></msub></mtd></mtr></mtable></mrow></mfenced></mrow></math>
  <p class="capture">A 4x4 matrix representing a <a interface>DOMMatrix</a> with items m11 to m44.</p>
</div>

In the following sections, terms have the following meaning:

<dl>
  <dt><dfn>post-multiply</dfn></dt>
  <dd>
    Term A post-multiplied by term B is equal to A &middot; B.
  </dd>
  <dt><dfn>pre-multiply</dfn></dt>
  <dd>
    Term A pre-multiplied by term B is equal to B &middot; A.
  </dd>
  <dt><dfn>multiply</dfn></dt>
  <dd>
    Multiply term A by term B is equal to A &middot; B.
  </dd>
</dl>

<pre class='idl'>
[Constructor(optional (DOMString or sequence&lt;unrestricted double>) init = [1, 0, 0, 1, 0, 0]),
 Exposed=(Window,Worker)]
interface DOMMatrixReadOnly {
    [NewObject] static DOMMatrixReadOnly fromMatrix(optional DOMMatrixInit other);
    [NewObject] static DOMMatrixReadOnly fromFloat32Array(Float32Array array32);
    [NewObject] static DOMMatrixReadOnly fromFloat64Array(Float64Array array64);

    // These attributes are simple aliases for certain elements of the 4x4 matrix
    readonly attribute unrestricted double a;
    readonly attribute unrestricted double b;
    readonly attribute unrestricted double c;
    readonly attribute unrestricted double d;
    readonly attribute unrestricted double e;
    readonly attribute unrestricted double f;

    readonly attribute unrestricted double m11;
    readonly attribute unrestricted double m12;
    readonly attribute unrestricted double m13;
    readonly attribute unrestricted double m14;
    readonly attribute unrestricted double m21;
    readonly attribute unrestricted double m22;
    readonly attribute unrestricted double m23;
    readonly attribute unrestricted double m24;
    readonly attribute unrestricted double m31;
    readonly attribute unrestricted double m32;
    readonly attribute unrestricted double m33;
    readonly attribute unrestricted double m34;
    readonly attribute unrestricted double m41;
    readonly attribute unrestricted double m42;
    readonly attribute unrestricted double m43;
    readonly attribute unrestricted double m44;

    readonly attribute boolean is2D;
    readonly attribute boolean isIdentity;

    // Immutable transform methods
    DOMMatrix translate(optional unrestricted double tx = 0,
                        optional unrestricted double ty = 0,
                        optional unrestricted double tz = 0);
    DOMMatrix scale(optional unrestricted double scaleX = 1,
                    optional unrestricted double scaleY,
                    optional unrestricted double scaleZ = 1,
                    optional unrestricted double originX = 0,
                    optional unrestricted double originY = 0,
                    optional unrestricted double originZ = 0);
    DOMMatrix scale3d(optional unrestricted double scale = 1,
                      optional unrestricted double originX = 0,
                      optional unrestricted double originY = 0,
                      optional unrestricted double originZ = 0);
    DOMMatrix rotate(optional unrestricted double rotX = 0,
                     optional unrestricted double rotY,
                     optional unrestricted double rotZ);
    DOMMatrix rotateFromVector(optional unrestricted double x = 0,
                               optional unrestricted double y = 0);
    DOMMatrix rotateAxisAngle(optional unrestricted double x = 0,
                              optional unrestricted double y = 0,
                              optional unrestricted double z = 0,
                              optional unrestricted double angle = 0);
    DOMMatrix skewX(optional unrestricted double sx = 0);
    DOMMatrix skewY(optional unrestricted double sy = 0);
    DOMMatrix multiply(optional DOMMatrixInit other);
    DOMMatrix flipX();
    DOMMatrix flipY();
    DOMMatrix inverse();

    DOMPoint            transformPoint(optional DOMPointInit point);
    Float32Array        toFloat32Array();
    Float64Array        toFloat64Array();
                        stringifier;
                        serializer = { attribute };
};

[Constructor(optional (DOMString or sequence&lt;unrestricted double>) init = [1, 0, 0, 1, 0, 0]),
 Exposed=(Window,Worker)]
interface DOMMatrix : DOMMatrixReadOnly {
    [NewObject] static DOMMatrix fromMatrix(optional DOMMatrixInit other);
    [NewObject] static DOMMatrix fromFloat32Array(Float32Array array32);
    [NewObject] static DOMMatrix fromFloat64Array(Float64Array array64);

    // These attributes are simple aliases for certain elements of the 4x4 matrix
    inherit attribute unrestricted double a;
    inherit attribute unrestricted double b;
    inherit attribute unrestricted double c;
    inherit attribute unrestricted double d;
    inherit attribute unrestricted double e;
    inherit attribute unrestricted double f;

    inherit attribute unrestricted double m11;
    inherit attribute unrestricted double m12;
    inherit attribute unrestricted double m13;
    inherit attribute unrestricted double m14;
    inherit attribute unrestricted double m21;
    inherit attribute unrestricted double m22;
    inherit attribute unrestricted double m23;
    inherit attribute unrestricted double m24;
    inherit attribute unrestricted double m31;
    inherit attribute unrestricted double m32;
    inherit attribute unrestricted double m33;
    inherit attribute unrestricted double m34;
    inherit attribute unrestricted double m41;
    inherit attribute unrestricted double m42;
    inherit attribute unrestricted double m43;
    inherit attribute unrestricted double m44;

    // Mutable transform methods
    DOMMatrix multiplySelf(optional DOMMatrixInit other);
    DOMMatrix preMultiplySelf(optional DOMMatrixInit other);
    DOMMatrix translateSelf(optional unrestricted double tx = 0,
                            optional unrestricted double ty = 0,
                            optional unrestricted double tz = 0);
    DOMMatrix scaleSelf(optional unrestricted double scaleX = 1,
                        optional unrestricted double scaleY,
                        optional unrestricted double scaleZ = 1,
                        optional unrestricted double originX = 0,
                        optional unrestricted double originY = 0,
                        optional unrestricted double originZ = 0);
    DOMMatrix scale3dSelf(optional unrestricted double scale = 1,
                          optional unrestricted double originX = 0,
                          optional unrestricted double originY = 0,
                          optional unrestricted double originZ = 0);
    DOMMatrix rotateSelf(optional unrestricted double rotX = 0,
                         optional unrestricted double rotY,
                         optional unrestricted double rotZ);
    DOMMatrix rotateFromVectorSelf(optional unrestricted double x = 0,
                                   optional unrestricted double y = 0);
    DOMMatrix rotateAxisAngleSelf(optional unrestricted double x = 0,
                                  optional unrestricted double y = 0,
                                  optional unrestricted double z = 0,
                                  optional unrestricted double angle = 0);
    DOMMatrix skewXSelf(optional unrestricted double sx = 0);
    DOMMatrix skewYSelf(optional unrestricted double sy = 0);
    DOMMatrix invertSelf();

    DOMMatrix setMatrixValue(DOMString transformList);
};

dictionary DOMMatrixInit {
    unrestricted double a;
    unrestricted double b;
    unrestricted double c;
    unrestricted double d;
    unrestricted double e;
    unrestricted double f;
    unrestricted double m11;
    unrestricted double m12;
    unrestricted double m13 = 0;
    unrestricted double m14 = 0;
    unrestricted double m21;
    unrestricted double m22;
    unrestricted double m23 = 0;
    unrestricted double m24 = 0;
    unrestricted double m31 = 0;
    unrestricted double m32 = 0;
    unrestricted double m33 = 1;
    unrestricted double m34 = 0;
    unrestricted double m41;
    unrestricted double m42;
    unrestricted double m43 = 0;
    unrestricted double m44 = 1;
    boolean is2D;
};
</pre>

The following algorithms assume that <a interface>DOMMatrixReadOnly</a> objects have the internal member variables <dfn dfn-for=matrix>m11 element</dfn>, <dfn dfn-for=matrix>m12 element</dfn>, <dfn dfn-for=matrix>m13 element</dfn>, <dfn dfn-for=matrix>m14 element</dfn>, <dfn dfn-for=matrix>m21 element</dfn>, <dfn dfn-for=matrix>m22 element</dfn>, <dfn dfn-for=matrix>m23 element</dfn>, <dfn dfn-for=matrix>m24 element</dfn>, <dfn dfn-for=matrix>m31 element</dfn>, <dfn dfn-for=matrix>m32 element</dfn>, <dfn dfn-for=matrix>m33 element</dfn>, <dfn dfn-for=matrix>m34 element</dfn>, <dfn dfn-for=matrix>m41 element</dfn>, <dfn dfn-for=matrix>m42 element</dfn>, <dfn dfn-for=matrix>m43 element</dfn>, <dfn dfn-for=matrix>m44 element</dfn> and <a>is2D</a>. <a interface>DOMMatrixReadOnly</a> as well as the inheriting interface <a interface>DOMMatrix</a> must be able to access and set the value of these variables.

An interface returning an <a interface>DOMMatrixReadOnly</a> object by an attribute or function may be able to modify internal member variable values. Such an interface must specify this ability explicitly in prose.

Internal member variables must not be exposed in any way.

The <a interface>DOMMatrix</a> and <a interface>DOMMatrixReadOnly</a> interfaces replace the SVGMatrix interface from SVG [[SVG11]].

For historical reasons, {{Window}} objects must also have writable, configurable, non-enumerable
properties named <dfn dfn-type=interface>SVGMatrix</dfn> and <dfn
dfn-type=interface>WebKitCSSMatrix</dfn> whose value is the <a interface>DOMMatrix</a> interface
object.

<h3 id='dommatrixinit-dictionary'>DOMMatrixInit dictionary</h3>

To <dfn>validate and fixup</dfn> a {{DOMMatrixInit}} dictionary <var>dict</var>, run the following steps:

<ol>
  <li>If if at least one of the following conditions are true for <var>dict</var>, throw a <code>TypeError</code> exception and abort these steps.
    <ul>
      <li>{{DOMMatrixInit/a}} and {{DOMMatrixInit/m11}} are both present and their values are not the same.
      <li>{{DOMMatrixInit/b}} and {{DOMMatrixInit/m12}} are both present and their values are not the same.
      <li>{{DOMMatrixInit/c}} and {{DOMMatrixInit/m21}} are both present and their values are not the same.
      <li>{{DOMMatrixInit/d}} and {{DOMMatrixInit/m22}} are both present and their values are not the same.
      <li>{{DOMMatrixInit/e}} and {{DOMMatrixInit/m41}} are both present and their values are not the same.
      <li>{{DOMMatrixInit/f}} and {{DOMMatrixInit/m42}} are both present and their values are not the same.
      <li>{{DOMMatrixInit/is2D}} is <code>true</code> and at least one of
      {{DOMMatrixInit/m31}}, {{DOMMatrixInit/m32}}, {{DOMMatrixInit/m13}}, {{DOMMatrixInit/m23}},
      {{DOMMatrixInit/m43}}, {{DOMMatrixInit/m14}}, {{DOMMatrixInit/m24}}, {{DOMMatrixInit/m34}}
      are present with a value other than ''0'',
      or at least one of {{DOMMatrixInit/m33}}, {{DOMMatrixInit/m44}}
      are present with a value other than ''1''.
    </ul>
  <li>If {{DOMMatrixInit/m11}} is not present then set it to the value of member {{DOMMatrixInit/a}}, or value ''1'' if {{DOMMatrixInit/a}} is also not present.
  <li>If {{DOMMatrixInit/m12}} is not present then set it to the value of member {{DOMMatrixInit/b}}, or value ''0'' if {{DOMMatrixInit/b}} is also not present.
  <li>If {{DOMMatrixInit/m21}} is not present then set it to the value of member {{DOMMatrixInit/c}}, or value ''0'' if {{DOMMatrixInit/c}} is also not present.
  <li>If {{DOMMatrixInit/m22}} is not present then set it to the value of member {{DOMMatrixInit/d}}, or value ''1'' if {{DOMMatrixInit/d}} is also not present.
  <li>If {{DOMMatrixInit/m41}} is not present then set it to the value of member {{DOMMatrixInit/e}}, or value ''0'' if {{DOMMatrixInit/e}} is also not present.
  <li>If {{DOMMatrixInit/m42}} is not present then set it to the value of member {{DOMMatrixInit/f}}, or value ''0'' if {{DOMMatrixInit/f}} is also not present.
  <li>If {{DOMMatrixInit/is2D}} is not present and at least one of
  {{DOMMatrixInit/m31}}, {{DOMMatrixInit/m32}}, {{DOMMatrixInit/m13}}, {{DOMMatrixInit/m23}},
  {{DOMMatrixInit/m43}}, {{DOMMatrixInit/m14}}, {{DOMMatrixInit/m24}}, {{DOMMatrixInit/m34}}
  are present with a value other than ''0'',
  or at least one of {{DOMMatrixInit/m33}}, {{DOMMatrixInit/m44}}
  are present with a value other than ''1'',
  set {{DOMMatrixInit/is2D}} to <code>false</code>.
  <li>If {{DOMMatrixInit/is2D}} is still not present, set it to <code>true</code>.
</ol>

For the purpose of the algorithm above, two WebIDL unrestricted double values
are the same if they have identical IEEE 754 double-precision bit patterns.

Note: This means that two ''NaN'' values are the same.

<h3 id='dommatrix-create'>Creating DOMMatrixReadOnly and DOMMatrix objects</h3>

To <dfn>create a 2d matrix</dfn> of type <var>type</var> being either {{DOMMatrixReadOnly}} or {{DOMMatrix}},
with a sequence <var>init</var> of 6 elements, follow these steps:

1. Let <var>matrix</var> be a new instance of <var>type</var>.
1. Set <a>m11 element</a>, <a>m12 element</a>, <a>m21 element</a>, <a>m22 element</a>, <a>m41 element</a> and <a>m42 element</a> to the values of <var>init</var> in order starting with the first value.
1. Set <a>m31 element</a>, <a>m32 element</a>, <a>m13 element</a>, <a>m23 element</a>, <a>m43 element</a>, <a>m14 element</a>, <a>m24 element</a> and <a>m34 element</a> to ''0''.
1. Set <a>m33 element</a> and <a>m44 element</a> to ''1''.
1. Set <a>is2D</a> to <code>true</code>.
1. Return <var>matrix</var>

To <dfn>create a 3d matrix</dfn> with <var>type</var> being either {{DOMMatrixReadOnly}} or {{DOMMatrix}},
with a sequence <var>init</var> of 16 elements, follow these steps:

1. Let <var>matrix</var> be a new instance of <var>type</var>.
1. Set <a>m11 element</a> to <a>m44 element</a> to the values of <var>init</var> in column-major order.
1. Set <a>is2D</a> to <code>false</code>.
1. Return <var>matrix</var>

The <dfn dfn-type=constructor dfn-for=DOMMatrixReadOnly><code>DOMMatrixReadOnly(<var>init</var>)</code></dfn> and
the <dfn dfn-type=constructor dfn-for=DOMMatrix><code>DOMMatrix(<var>init</var>)</code></dfn> constructors must follow these steps:

<dl class=switch>
  <dt>If <var>init</var> is a {{DOMString}}</dt>
  <dd>
    <ol>
      <li>If <var>init</var> is the empty string, set it to the string
      "<code>matrix(1, 0, 0, 1, 0, 0)</code>".</li>
      <li>Parse <var>init</var> into <var>parsedValue</var> by following the syntax description in
      “<a href=https://drafts.csswg.org/css-transforms-1/#svg-syntax>Syntax of the SVG ‘transform’
      attribute</a>” [[!CSS3-TRANSFORMS]] to a <<transform-list>> or the keyword ''transform/none''.
      If parsing is not successful, or any <<transform-function>> has <<length>> values without <a
      spec='css-values'>absolute length</a> units<!--For WD: <a spec='css-values-3'>absolute length
      units</a>-->, or any keyword other than ''transform/none'' is used, throw a {{SyntaxError}}
      exception.</li>
      <li>If <var>parsedValue</var> is ''transform/none'', set <var>parsedValue</var> to a
      <<transform-list>> containing a single identity matrix</li>
      <li>Let <var>2dTransform</var> track the 2D/3D dimension status of <var>parsedValue</var>.
        <dl class=switch>
          <dt>If <var>parsedValue</var> consists of any <a
          href='https://drafts.csswg.org/css-transforms-1/#three-d-transform-functions'>3D Transform
          functions</a></dt>
          <dd>Set <var>2dTransform</var> to <code>false</code>.</dd>
          <dt>Otherwise</dt>
          <dd>Set <var>2dTransform</var> to <code>true</code>.</dd>
        </dl>
      </li>
      <li>Transform all <<transform-function>>s to 4x4 matrices by following the “<a
      href=https://drafts.csswg.org/css-transforms-1/#mathematical-description>Mathematical
      Description of Transform Functions</a>” [[!CSS3-TRANSFORMS]].</li>
      <li>Let <var>matrix</var> be a 4x4 matrix as shown in the initial figure of this section.
      Post-multiply all matrices from left to right and set <var>matrix</var> to this product.</li>
      <li>
        <dl class=switch>
          <dt>If <var>2dTransform</var> is set to <code>true</code></dt>
          <dd>Return the result of invoking <a>create a 2d matrix</a> of type {{DOMMatrixReadOnly}}
          or {{DOMMatrix}} as appropriate, with a sequence of numbers, the values being the elements
          <var>m11</var>, <var>m12</var>, <var>m21</var>, <var>m22</var>, <var>m41</var> and
          <var>m42</var> of <var>matrix</var>.</dd>
          <dt>If <var>2dTransform</var> is set to <code>false</code></dt>
          <dd>Return the result of invoking <a>create a 3d matrix</a> of type {{DOMMatrixReadOnly}}
          or {{DOMMatrix}} as appropriate, with a sequence of numbers, the values being the 16
          elements of <var>matrix</var>.</dd>
        </dl>
      </li>
    </ol>
  </dd>
  <dt>If <var>init</var> is a sequence with 6 elements</dt>
  <dd>Return the result of invoking <a>create a 2d matrix</a> of type {{DOMMatrixReadOnly}} or
  {{DOMMatrix}} as appropriate, with the sequence <var>init</var>.</dd>
  <dt>If <var>init</var> is a sequence with 16 elements</dt>
  <dd>Return the result of invoking <a>create a 3d matrix</a> of type {{DOMMatrixReadOnly}} or
  {{DOMMatrix}} as appropriate, with the sequence <var>init</var>.</dd>
  <dt>Otherwise</dt>
  <dd>Throw a <code>TypeError</code> exception.</dd>
</dl>

The <dfn method lt=fromMatrix() dfn-for=DOMMatrixReadOnly
id=dom-dommatrixreadonly-frommatrix><code>fromMatrix(<var>other</var>)</code></dfn> static method on
{{DOMMatrixReadOnly}} must <a>create a <code>DOMMatrixReadOnly</code> from the dictionary</a>
<var>other</var>.

The <dfn method lt=fromMatrix() dfn-for=DOMMatrix
id=dom-dommatrix-frommatrix><code>fromMatrix(<var>other</var>)</code></dfn> static method on
{{DOMMatrix}} must <a>create a <code>DOMMatrix</code> from the dictionary</a> <var>other</var>.

To <dfn lt="create a DOMMatrixReadOnly from the dictionary">create a <code>DOMMatrixReadOnly</code>
from a dictionary</dfn> <var>other</var> or to <dfn lt="create a DOMMatrix from the
dictionary">create a <code>DOMMatrix</code> from a dictionary</dfn> <var>other</var>, follow these
steps:

<ol>
  <li><a>Validate and fixup</a> <var>other</var>.</li>

  <li>
    <dl class=switch>
      <dt>If the {{DOMMatrixInit/is2D}} dictionary member of <var>other</var> is <code>true</code></dt>
      <dd>Return the result of invoking <a>create a 2d matrix</a> of type {{DOMMatrixReadOnly}} or {{DOMMatrix}} as appropriate, with a sequence of numbers, the values being the 6 elements {{DOMMatrixInit/m11}}, {{DOMMatrixInit/m12}}, {{DOMMatrixInit/m21}}, {{DOMMatrixInit/m22}}, {{DOMMatrixInit/m41}} and {{DOMMatrixInit/m42}} of <var>other</var> in the given order.</dd>
      <dt>Otherwise</dt>
      <dd>Return the result of invoking <a>create a 3d matrix</a> of type {{DOMMatrixReadOnly}} or {{DOMMatrix}} as appropriate, with a sequence of numbers, the values being the 16 elements {{DOMMatrixInit/m11}}, {{DOMMatrixInit/m12}}, {{DOMMatrixInit/m13}}, ..., {{DOMMatrixInit/m44}} of <var>other</var> in the given order.</dd>
    </dl>
  </li>
</ol>

The <dfn method dfn-for=DOMMatrixReadOnly id=dom-dommatrixreadonly-fromfloat32array><code>fromFloat32Array(<var>array32</var>)</code></dfn> static method on {{DOMMatrixReadOnly}} and
the <dfn method dfn-for=DOMMatrix id=dom-dommatrix-fromfloat32array><code>fromFloat32Array(<var>array32</var>)</code></dfn> static method on {{DOMMatrix}} must follow these steps:

<dl class=switch>
  <dt>If <var>array32</var> has 6 elements</dt>
  <dd>Return the result of invoking <a>create a 2d matrix</a> of type {{DOMMatrixReadOnly}} or {{DOMMatrix}} as appropriate, with a sequence of numbers taking the values from <var>array32</var> in the provided order.</dd>
  <dt>If <var>array32</var> has 16 elements</dt>
  <dd>Return the result of invoking <a>create a 3d matrix</a> of type {{DOMMatrixReadOnly}} or {{DOMMatrix}} as appropriate, with a sequence of numbers taking the values from <var>array32</var> in the provided order.</dd>
  <dt>Otherwise</dt>
  <dd>Throw a <code>TypeError</code> exception.</dd>
</dl>

The <dfn method dfn-for=DOMMatrixReadOnly id=dom-dommatrixreadonly-fromfloat64array><code>fromFloat64Array(<var>array64</var>)</code></dfn> static method on {{DOMMatrixReadOnly}} and
the <dfn method dfn-for=DOMMatrix id=dom-dommatrix-fromfloat64array><code>fromFloat64Array(<var>array64</var>)</code></dfn> static method on {{DOMMatrix}} must follow these steps:

<dl class=switch>
  <dt>If <var>array64</var> has 6 elements</dt>
  <dd>Return the result of invoking <a>create a 2d matrix</a> of type {{DOMMatrixReadOnly}} or {{DOMMatrix}} as appropriate, with a sequence of numbers taking the values from <var>array64</var> in the provided order.</dd>
  <dt>If <var>array32</var> has 16 elements</dt>
  <dd>Return the result of invoking <a>create a 3d matrix</a> of type {{DOMMatrixReadOnly}} or {{DOMMatrix}} as appropriate, with a sequence of numbers taking the values from <var>array64</var> in the provided order.</dd>
  <dt>Otherwise</dt>
  <dd>Throw a <code>TypeError</code> exception.</dd>
</dl>


<h3 id='dommatrix-attributes'>DOMMatrix attributes</h3>

The following attributes <a attribute>m11</a> to <a attribute>m44</a> correspond to the 16 items of the matrix interfaces. For the <a interface>DOMMatrix</a> interface, if the attributes <a attribute>m31</a>, <a attribute>m32</a>, <a attribute>m13</a>, <a attribute>m23</a>, <a attribute>m43</a>, <a attribute>m14</a>, <a attribute>m24</a>, <a attribute>m34</a> are set to something else than ''0'' or <a attribute>m33</a>, <a attribute>m44</a> are set to something else than ''1'' set <a>is2D</a> to <code>false</code>.

<div dfn-type=attribute dfn-for='DOMMatrixReadOnly, DOMMatrix'>
  The <dfn>m11</dfn> attribute, on getting, must return the <a>m11 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m11</a> attribute must set the <a>m11 element</a> value of the object it was invoked on to the new value.

  The <dfn>m12</dfn> attribute, on getting, must return the <a>m12 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m12</a> attribute must set the <a>m12 element</a> value of the object it was invoked on to the new value.

  The <dfn>m13</dfn> attribute, on getting, must return the <a>m13 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m13</a> attribute must set the <a>m13 element</a> value of the object it was invoked on to the new value.

  The <dfn>m14</dfn> attribute, on getting, must return the <a>m14 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m14</a> attribute must set the <a>m14 element</a> value of the object it was invoked on to the new value.

  The <dfn>m21</dfn> attribute, on getting, must return the <a>m21 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m21</a> attribute must set the <a>m21 element</a> value of the object it was invoked on to the new value.

  The <dfn>m22</dfn> attribute, on getting, must return the <a>m22 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m22</a> attribute must set the <a>m22 element</a> value of the object it was invoked on to the new value.

  The <dfn>m23</dfn> attribute, on getting, must return the <a>m23 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m23</a> attribute must set the <a>m23 element</a> value of the object it was invoked on to the new value.

  The <dfn>m24</dfn> attribute, on getting, must return the <a>m24 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m24</a> attribute must set the <a>m24 element</a> value of the object it was invoked on to the new value.

  The <dfn>m31</dfn> attribute, on getting, must return the <a>m31 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m31</a> attribute must set the <a>m31 element</a> value of the object it was invoked on to the new value.

  The <dfn>m32</dfn> attribute, on getting, must return the <a>m32 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m32</a> attribute must set the <a>m32 element</a> value of the object it was invoked on to the new value.

  The <dfn>m33</dfn> attribute, on getting, must return the <a>m33 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m33</a> attribute must set the <a>m33 element</a> value of the object it was invoked on to the new value.

  The <dfn>m34</dfn> attribute, on getting, must return the <a>m34 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m34</a> attribute must set the <a>m34 element</a> value of the object it was invoked on to the new value.


  The <dfn>m41</dfn> attribute, on getting, must return the <a>m41 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m41</a> attribute must set the <a>m41 element</a> value of the object it was invoked on to the new value.

  The <dfn>m42</dfn> attribute, on getting, must return the <a>m42 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m42</a> attribute must set the <a>m42 element</a> value of the object it was invoked on to the new value.

  The <dfn>m43</dfn> attribute, on getting, must return the <a>m43 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m43</a> attribute must set the <a>m43 element</a> value of the object it was invoked on to the new value.

  The <dfn>m44</dfn> attribute, on getting, must return the <a>m44 element</a> value of the object it was invoked on. For the <a interface>DOMMatrix</a> interface, setting the <a attribute>m44</a> attribute must set the <a>m44 element</a> value of the object it was invoked on to the new value.
</div>


<div dfn-type=attribute dfn-for='DOMMatrixReadOnly, DOMMatrix'>
  The following attributes <a attribute>a</a> to <a attribute>f</a> correspond to the 2D components of the matrix interfaces.

  The <dfn>a</dfn> attribute is an alias to the <a attribute>m11</a> attribute.

  The <dfn>b</dfn> attribute is an alias to the <a attribute>m12</a> attribute.

  The <dfn>c</dfn> attribute is an alias to the <a attribute>m21</a> attribute.

  The <dfn>d</dfn> attribute is an alias to the <a attribute>m22</a> attribute.

  The <dfn>e</dfn> attribute is an alias to the <a attribute>m41</a> attribute.

  The <dfn>f</dfn> attribute is an alias to the <a attribute>m42</a> attribute.
</div>

The following attributes provide status information about <a interface>DOMMatrixReadOnly</a>.

<dl dfn-type=attribute dfn-for=DOMMatrixReadOnly>
  <dt><dfn>is2D</dfn></dt>
  <dd>
    <p>Every <a interface>DOMMatrixReadOnly</a> object must be flagged with a boolean <dfn dfn-type=dfn export>is2D</dfn>. This flag indicates that
      <ol>
        <li>The current matrix was initialized as a 2D matrix. See individual <a href="#dommatrix-create">creators</a> for more details.</li>
        <li>Only 2D transformation operations were applied. Each <a href='#mutable-transformation-methods'>mutable</a> or <a href='#immutable-transformation-methods'>immutable transformation method</a> defines if <a>is2D</a> must be set to <code>false</code>.</li>
      </ol>
    </p>
    <p class='note'><a>is2D</a> can never be set to <code>true</code> when it was set to <code>false</code> before on a <a interface>DOMMatrix</a> object with the exception of calling the {{DOMMatrix/setMatrixValue()}} method.</p>
    <p>Returns the value of <a>is2D</a>.</p>
  </dd>
  <dt><dfn>isIdentity</dfn></dt>
  <dd>
    Returns <code>true</code> if <a attribute>m12</a>, <a attribute>m13</a>, <a attribute>m14</a>, <a attribute>m21</a>, <a attribute>m23</a>, <a attribute>m24</a>, <a attribute>m31</a>, <a attribute>m32</a>, <a attribute>m34</a>, <a attribute>m41</a>, <a attribute>m42</a>, <a attribute>m43</a> are ''0'' and <a attribute>m11</a>, <a attribute>m22</a>, <a attribute>m33</a>, <a attribute>m44</a> are ''1''. Otherwise returns <code>false</code>.
  </dd>
</dl>

<h3 id='immutable-transformation-methods'>Immutable transformation methods</h3>

The following methods do not modify the current matrix and return a new <a interface>DOMMatrix</a> object.

<dl dfn-type=method dfn-for=DOMMatrixReadOnly>
  <dt><dfn>translate(<var>tx</var>, <var>ty</var>, <var>tz</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/translateSelf()}} transformation on <em>result</em> with the arguments <var>tx</var>, <var>ty</var>, <var>tz</var>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>scale(<var>scaleX</var>, <var>scaleY</var>, <var>scaleZ</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <var>result</var> be the resulting matrix initialized to the values of the current
      matrix.</li>

      <li>Perform a {{DOMMatrix/scaleSelf()}} transformation on <var>result</var> with the arguments
      <var>scaleX</var>, <var>scaleY</var>, <var>scaleZ</var>, <var>originX</var>,
      <var>originY</var>, <var>originZ</var>.</li>

      <li>Return <var>result</var>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>scale3d(<var>scale</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/scale3dSelf()}} transformation on <em>result</em> with the arguments <var>scale</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>rotate(<var>rotX</var>, <var>rotY</var>, <var>rotZ</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/rotateSelf()}} transformation on <em>result</em> with the arguments <var>rotX</var>, <var>rotY</var>, <var>rotZ</var>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>rotateFromVector(<var>x</var>, <var>y</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/rotateFromVectorSelf()}} transformation on <em>result</em> with the arguments <var>x</var>, <var>y</var>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>rotateAxisAngle(<var>x</var>, <var>y</var>, <var>z</var>, <var>angle</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/rotateAxisAngleSelf()}} transformation on <em>result</em> with the arguments <var>x</var>, <var>y</var>, <var>z</var>, <var>angle</var>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>skewX(<var>sx</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/skewXSelf()}} transformation on <em>result</em> with the argument <var>sx</var>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>skewY(<var>sy</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/skewYSelf()}} transformation on <em>result</em> with the argument <var>sy</var>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>multiply(<var>other</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/multiplySelf()}} transformation on <em>result</em> with the argument <var>other</var>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>flipX()</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Post-multiply <em>result</em> with <code>DOMMatrix(-1, 0, 0, 1, 0, 0)</code>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>flipY()</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Post-multiply <em>result</em> with <code>DOMMatrix(1, 0, 0, -1, 0, 0)</code>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
  <dt><dfn>inverse()</dfn></dt>
  <dd>
    <ol>
      <li>Let <em>result</em> be the resulting matrix initialized to the values of the current matrix.</li>
      <li>Perform a {{DOMMatrix/invertSelf()}} transformation on <em>result</em>.</li>
      <li>Return <em>result</em>.</li>
    </ol>
    <p>The current matrix is not modified.</p>
  </dd>
</dl>

The following methods do not modify the current matrix.

<dl dfn-type=method dfn-for=DOMMatrixReadOnly>
  <dt><dfn>transformPoint(<var>point</var>)</dfn></dt>
  <dd>
    Let <var>point object</var> be the result of invoking <a>create a <code>DOMPoint</code> from the dictionary</a> <var>point</var>.
    <var>Point object</var> is post-multiplied to the current matrix and returns the resulting point. The passed argument does not get modified.
    <p class='note'>Note: Even if <a attribute>is2D</a> of the current matrix returns <code>true</code>, a 4x4 matrix multiplication will be performed if the <a attribute>z</a> attribute of <var>point</var> is not ''0'' or the <a attribute>w</a> attribute of <var>point</var> is not ''1''.</p>
  </dd>
  <dt><dfn>toFloat32Array()</dfn></dt>
  <dd>
    Returns the serialized 16 elements <a attribute>m11</a> to <a attribute>m44</a> of the current matrix in column-major order as <a interface>Float32Array</a> [[typedarray]].
  </dd>
  <dt><dfn>toFloat64Array()</dfn></dt>
  <dd>
    Returns the serialized 16 elements <a attribute>m11</a> to <a attribute>m44</a> of the current matrix in column-major order as <a interface>Float64Array</a> [[typedarray]].
  </dd>
  <dt><dfn>stringifier()</dfn></dt>
  <dd>
    <dl class=switch>
      <dt>If <a>is2D</a> is <code>true</code></dt>
      <dd>
        Return a DOMString in the form of a CSS Transforms <<matrix()>> function where <var>a</var> is <a attribute>a</a> attribute, <var>b</var> is <a attribute>b</a> attribute, <var>c</var> is <a attribute>c</a> attribute, <var>d</var> is <a attribute>d</a> attribute, <var>e</var> is <a attribute>e</a> attribute, <var>f</var> is <a attribute>f</a> attribute, [[!CSS3-TRANSFORMS]].</li>
      </dd>
      <dt>Otherwise</dt>
      <dd>
        Return a DOMString in the form of a CSS Transforms <<matrix3d()>> function where <var>m11</var> to <var>m44</var> are set to <a attribute>m11</a> to <a attribute>m44</a> attributes [[!CSS3-TRANSFORMS]].
      </dd>
    </dl>
    <div class='example'>
      <p>In this example, a matrix is created and several 2D transformation methods are called:</p>
      <pre><code>var matrix = new DOMMatrix();
matrix.scaleSelf(2);
matrix.translateSelf(20,20);</code></pre>
      <p>Calling <code>matrix.toString()</code> returns the DOMString:</p>
      <pre><code>"matrix(2, 0, 0, 2, 20, 20)"</code></pre>
      <p>In the following example, a matrix is created and several 3D transformation methods are called:</p>
      <pre><code>var matrix = new DOMMatrix();
matrix.scale3dSelf(2);</code></pre>
      <p>For 3D operations, the <var>stringifier</var> returns a DOMString representing a 3D matrix.</p>
      <p>Calling <code>matrix.toString()</code> after the snippet above returns the DOMString:</p>
      <pre><code>"matrix3d(2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1)"</code></pre>
    </div>
  </dd>
</dl>

<h3 id='mutable-transformation-methods'>Mutable transformation methods</h3>

The following methods modify the current matrix, so that each method returns the matrix where it was invoked on. The primary benefit of this is allowing content creators to chain method calls.

<div class='example'>
<p>The following code example:</p>

<pre><code>var matrix = new DOMMatrix();
matrix.translateSelf(20, 20);
matrix.scaleSelf(2);
matrix.translateSelf(-20, -20);
</code></pre>

<p>is equivalent to:</p>

<pre><code>var matrix = new DOMMatrix();
matrix.translateSelf(20, 20).scaleSelf(2).translateSelf(-20, -20);
</code></pre>
</div>

Note: Authors who use chained method calls are recommended to use mutable transformation methods to avoid unnecessary memory allocations due to creation of intermediate DOMMatrix objects in User Agents.

<dl dfn-type=method dfn-for=DOMMatrix>
  <dt><dfn>multiplySelf(<var>other</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <var>other object</var> be the result of invoking <a>create a <code>DOMMatrix</code> from the dictionary</a> <var>other</var>.</li>
      <li>The <var>other object</var> matrix gets post-multiplied to the current matrix.</li>
      <li>If <a>is2D</a> of <var>other object</var> is <code>false</code>, set <a>is2D</a> of the current matrix to <code>false</code>.</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>preMultiplySelf(<var>other</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Let <var>other object</var> be the result of invoking <a>create a <code>DOMMatrix</code> from the dictionary</a> <var>other</var>.</li>
      <li>The <var>other object</var> matrix gets pre-multiplied to the current matrix.</li>
      <li>If <a>is2D</a> of <var>other object</var> is <code>false</code>, set <a>is2D</a> of the current matrix to <code>false</code>.</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>translateSelf(<var>tx</var>, <var>ty</var>, <var>tz</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Post-multiply a translation transformation on the current matrix. The 3D translation matrix is <a href="https://drafts.csswg.org/css-transforms-1/#Translate3dDefined">described</a> in CSS Transforms [[!CSS3-TRANSFORMS]].</p>
      <li>If <em>tz</em> is specified and not ''0'', set <a>is2D</a> of the current matrix to <code>false</code>.</p>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>scaleSelf(<var>scaleX</var>, <var>scaleY</var>, <var>scaleZ</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Perform a {{DOMMatrix/translateSelf()}} transformation on the current matrix with the arguments <var>originX</var>, <var>originY</var>, <var>originZ</var>.</li>

      <li>If <var>scaleY</var> is missing, set <var>scaleY</var> to the value of
      <var>scaleX</var>.</li>

      <li>Post-multiply a non-uniform scale transformation on the current matrix. The 3D scale
      matrix is <a
      href="https://drafts.csswg.org/css-transforms-1/#Scale3dDefined">described</a> in
      CSS Transforms with <var>sx</var> = <var>scaleX</var>,  <var>sy</var> = <var>scaleY</var> and
      <var>sz</var> = <var>scaleZ</var>. [[!CSS3-TRANSFORMS]].</li>

      <li>Negate <var>originX</var>, <var>originY</var> and <var>originZ</var>.</li>

      <li>Perform a {{DOMMatrix/translateSelf()}}</a> transformation on the current matrix with the
      arguments <var>originX</var>, <var>originY</var>, <var>originZ</var>.</li>

      <li>If <var>scaleZ</var> is not ''1'' or <var>originZ</var> is not ''0'', set <a>is2D</a> of
      the current matrix to <code>false</code>.</li>

      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>scale3dSelf(<var>scale</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Apply a {{DOMMatrix/translateSelf()}} transformation to the current matrix with the arguments <var>originX</var>, <var>originY</var>, <var>originZ</var>.</li>
      <li>Post-multiply a uniform 3D scale transformation (<a attribute>m11</a> = <a attribute>m22</a> = <a attribute>m33</a> = <em>scale</em>) on the current matrix. The 3D scale matrix is <a href="https://drafts.csswg.org/css-transforms-1/#Scale3dDefined">described</a> in CSS Transforms with <em>sx</em> = <em>sy</em> = <em>sz</em> = <em>scale</em>. [[!CSS3-TRANSFORMS]].</li>
      <li>Apply a {{DOMMatrix/translateSelf()}} transformation to the current matrix with the arguments -<var>originX</var>, -<var>originY</var>, -<var>originZ</var>.</li>
      <li>If <em>scale</em> is not ''1'', set <a>is2D</a> of the current matrix to <code>false</code>.</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>rotateSelf(<var>rotX</var>, <var>rotY</var>, <var>rotZ</var>)</dfn></dt>
  <dd>
    <ol>
      <li>If <var>rotY</var> and <var>rotZ</var> are both missing, set <var>rotZ</var> to the value
      of <var>rotX</var> and set <var>rotX</var> and <var>rotY</var> to zero.</li>

      <li>If <var>rotY</var> is still missing, set <var>rotY</var> to zero.</li>

      <li>If <var>rotZ</var> is still missing, set <var>rotZ</var> to zero.</li>

      <li>If <var>rotX</var> or <var>rotY</var> are non-zero, set <a>is2D</a> of the current matrix
      to <code>false</code>.</li>

      <li>Post-multiply a rotation transformation on the current matrix around the vector 0, 0, 1 by
      the specified rotation <var>rotZ</var> in degrees. The 3D rotation matrix is <a
      href="https://drafts.csswg.org/css-transforms-1/#Rotate3dDefined">described</a> in CSS
      Transforms with <var>alpha</var> = <var>rotZ</var> in degrees [[!CSS3-TRANSFORMS]].</li>

      <li>Post-multiply a rotation transformation on the current matrix around the vector 0, 1, 0 by
      the specified rotation <var>rotY</var> in degrees. The 3D rotation matrix is <a
      href="https://drafts.csswg.org/css-transforms-1/#Rotate3dDefined">described</a> in CSS
      Transforms with <var>alpha</var> = <var>rotY</var> in degrees [[!CSS3-TRANSFORMS]].</li>

      <li>Post-multiply a rotation transformation on the current matrix around the vector 1, 0, 0 by
      the specified rotation <var>rotX</var> in degrees. The 3D rotation matrix is <a
      href="https://drafts.csswg.org/css-transforms-1/#Rotate3dDefined">described</a> in CSS
      Transforms with <var>alpha</var> = <var>rotX</var> in degrees [[!CSS3-TRANSFORMS]].</li>

      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>rotateFromVectorSelf(<var>x</var>, <var>y</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Post-multiply a rotation transformation on the current matrix. The rotation angle is determined by the angle between the vector (1,0)<sup>T</sup> and (<em>x</em>,<em>y</em>)<sup>T</sup> in the clockwise direction. If <em>x</em> and <em>y</em> should both be zero, the angle is specified as zero. The 2D rotation matrix is <a href="https://drafts.csswg.org/css-transforms-1/#RotateDefined">described</a> in CSS Transforms where <code>alpha</code> is the angle between the vector (1,0)<sup>T</sup> and (<em>x</em>,<em>y</em>)<sup>T</sup> in degrees [[!CSS3-TRANSFORMS]].</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>rotateAxisAngleSelf(<var>x</var>, <var>y</var>, <var>z</var>, <var>angle</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Post-multiply a rotation transformation on the current matrix around the specified vector <em>x</em>, <em>y</em>, <em>z</em> by the specified rotation <em>angle</em> in degrees. The 3D rotation matrix is <a href="https://drafts.csswg.org/css-transforms-1/#Rotate3dDefined">described</a> in CSS Transforms with <em>alpha</em> = <em>angle</em> in degrees [[!CSS3-TRANSFORMS]].</li>
      <li>If <em>x</em> or <em>y</em> are not ''0'', set <a>is2D</a> of the current matrix to <code>false</code>.</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>skewXSelf(<var>sx</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Post-multiply a skewX transformation on the current matrix by the specified angle <em>sx</em> in degrees. The 2D skewX matrix is <a href="https://drafts.csswg.org/css-transforms-1/#SkewXDefined">described</a> in CSS Transforms with <em>alpha</em> = <em>sx</em> in degrees [[!CSS3-TRANSFORMS]].</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>skewYSelf(<var>sy</var>)</dfn></dt>
  <dd>
    <ol>
      <li>Post-multiply a skewX transformation on the current matrix by the specified angle <em>sy</em> in degrees. The 2D skewY matrix is <a href="https://drafts.csswg.org/css-transforms-1/#SkewYDefined">described</a> in CSS Transforms with <em>beta</em> = <em>sy</em> in degrees [[!CSS3-TRANSFORMS]].</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>invertSelf()</dfn></dt>
  <dd>
    <ol>
      <li>Invert the current matrix.</li>
      <li>If the current matrix is not invertible set all attributes to ''NaN'' and set <a>is2D</a> to <code>false</code>.</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
  <dt><dfn>setMatrixValue(<var>transformList</var>)</dfn></dt>
  <dd>
    <ol>
      <li>If <var>transformList</var> is the empty string, set it to the string "<code lt>matrix(1,
      0, 0, 1, 0, 0)</code>".</li>
      <li>Parse <var>transformList</var> by following the syntax description in “<a
      href=https://drafts.csswg.org/css-transforms-1/#svg-syntax>Syntax of the SVG ‘transform’
      attribute</a>” [[!CSS3-TRANSFORMS]] to a <<transform-list>>. If parsing is not successful, or
      any <<transform-function>> has <<length>> values without <a spec='css-values'>absolute
      length</a> units<!--For WD: <a spec='css-values-3'>absolute length units</a>-->, or any
      keyword other than ''transform/none'' is used, throw a {{SyntaxError}}
      exception.</li>
      <li>Set <a>is2D</a> to <code>false</code> if the <<transform-list>> consists of any <a href='https://drafts.csswg.org/css-transforms-1/#three-d-transform-functions'>3D Transform functions</a>. Otherwise set <a>is2D</a> to <code>true</code>.</li>
      <li>Transform all <<transform-function>>s to 4x4 matrices by following the “<a href=https://drafts.csswg.org/css-transforms-1/#mathematical-description>Mathematical Description of Transform Functions</a>” [[!CSS3-TRANSFORMS]].</li>
      <li>Post-multiply all matrices from left to right to a combined 4x4 matrix.</li>
      <li>Set the <a attribute>m11</a> to <a attribute>m44</a> attributes to the element values of the 4x4 matrix in column-major order.</li>
      <li>Return the current matrix.</li>
    </ol>
  </dd>
</dl>

<h2 id="cloning">Cloning</h2>

When a user agent is asked to <b>clone</b> an <a interface>DOMPointReadOnly</a>, <a interface>DOMPoint</a>, <a interface>DOMRectReadOnly</a>, <a interface>DOMRect</a>, <a interface>DOMQuad</a>, <a interface>DOMMatrixReadOnly</a> or <a interface>DOMMatrix</a> object <var>old</var>, it must run the following steps, which return a new object of same type. These steps must be run atomically.

<ol>
<li>Create a new object <var>new</var> of the same type as <var>old</var>. Copy all member variable values from <var>old</var> to <var>new</var>.
<li>Return <var>new</var>. It is the clone.
</ol>

The above algorithm follows the <a href="https://www.w3.org/TR/html5/infrastructure.html#safe-passing-of-structured-data">“safe passing of structured data”</a> [[!HTML5]] definitions.

<h2 class="no-num" id="changes">Changes since last publication</h2>

The following changes were made since the <a href="https://www.w3.org/TR/2014/WD-geometry-1-20140918/">18 September 2014 Working Draft</a>.

<ul>
  <li>Changed {{DOMMatrixReadOnly}} and {{DOMMatrix}} to be compatible with
  <code>WebKitCSSMatrix</code>:
    <ul>
      <li>Changed {{DOMMatrixReadOnly/rotate()}} and {{DOMMatrix/rotateSelf()}} arguments from
      (angle, originX, originY) to (rotX, rotY, rotZ).

      <li>Changed the {{DOMMatrixReadOnly/scale()}} and {{DOMMatrix/scaleSelf()}} methods to be more
      like the previous <code>scaleNonUniform()</code>/<code>scaleNonUniformSelf()</code> methods,
      and dropped the <code>scaleNonUniform*</code> methods.

      <li>Made all arguments optional for {{DOMMatrix}}/{{DOMMatrixReadOnly}} methods, except for
      {{DOMMatrix/setMatrixValue()}}.

      <li>Changed <code>fromString()</code> static method to overloaded constructor.

      <li>Added no-argument constructor.

      <li>Defined <code>window.WebKitCSSMatrix</code> to alias {{DOMMatrix}}.
    </ul>
  <li>Exposed <a interface>DOMPointReadOnly</a>, <a interface>DOMPoint</a>, <a interface>DOMRectReadOnly</a>, <a interface>DOMRect</a>, <a interface>DOMQuad</a>, <a interface>DOMMatrixReadOnly</a> and <a interface>DOMMatrix</a> to <code>Window</code> and <code>Worker</code>. Defined cloning of the interfaces.</li>
  <li>The live <code>bounds</code> attribute on {{DOMQuad}} was replaced with a non-live {{DOMQuad/getBounds()}} method. The "associated bounding rectangle" concept was also removed.
</ul>

The following changes were made since the <a href="https://www.w3.org/TR/2014/WD-geometry-1-20140626/">26 June 2014 Last Call Public Working Draft</a>.

<ul>
  <li><a interface>DOMPointReadOnly</a> got a constructor taking 4 arguments.</li>
  <li><a interface>DOMRectReadOnly</a> got a constructor taking 4 arguments.</li>
  <li><a interface>DOMMatrixReadOnly</a> got a constructor taking a sequence of numbers as argument.</li>
  <li>DOMRectList turned to an ArrayClass. The interfaces must just be used for legacy interfaces.</li>
  <li>Put DOMRectList on at-Risk awaiting browser feedback.</li>
  <li>All interfaces are described in the sense of internal elements to describe the read-only/writable and inheriting behavior.</li>
  <li>Replace IndexSizeError exception with TypeError.</li>
</ul>

The following changes were made since the <a href="https://www.w3.org/TR/2014/WD-geometry-1-20140522/">22 May 2014 First Public Working Draft</a>.

<ul>
  <li>Renamed mutable transformation methods *By to *Self. (E.g. translateBy() got to translateSelf().)</li>
  <li>Renamed invert() to <a>invertSelf()</a>.</li>
  <li>Added {{DOMMatrix/setMatrixValue()}} which takes a transformation list as DOMString.</li>
  <li><a attribute>is2D</a> and <a attribute>isIdentity</a> are read-only attributes now.</li>
  <li><a interface>DOMMatrixReadOnly</a> gets flagged to track 3D transformation and attribute settings for <a attribute>is2D</a>.</li>
  <li><a>invertSelf()</a> and <a>inverse()</a> do not throw exceptions anymore.</li>
</ul>

<h2 class=no-num id='acknowledgments'>Acknowledgments</h2>

The editors would like to thank Robert O’Callahan for contributing to this specification.
Many thanks to Dean Jackson for his initial proposal of DOMMatrix.
Thanks to
Adenilson Cavalcanti,
Benoit Jacob,
Boris Zbarsky,
Brian Birtles,
Cameron McCormack,
Domenic Denicola,
Kari Pihkala,
Max Vujovic,
Mike Taylor,
Peter Hall,
and
Philip Jägenstedt
for their careful reviews, comments, and corrections.
